I">	<h1 id="ch1-깨끗한-코드">Ch1. 깨끗한 코드</h1>

<hr />

<p><strong>코드는 존재하리라</strong></p>

<p>궁극적으로 코드는 요구사항을 표현하는 언어라는 사실을 명심한다.<br />
요구사항에 더욱 가까운 언어를 만들 수도 있고,<br />
요구사항에서 정형 구조를 뽑아내는 도구를 만들 수도 있다.<br />
하지만 어느 순간에는 정밀한 표현이 필요하다. 그 필요성을 없앨 방법은 없다.<br />
그러므로 코드는 항상 존재하리라.</p>

<hr />

<p><strong>나쁜 코드</strong></p>

<p>르블랑의 법칙(leblanc’s Law) : 나중은 결코 오지 않는다.</p>

<p>나쁜 코드가 쌓일수록 팀 생산성은 떨어진다. 
하지만 기한을 맞추려면 나쁜 코드를 양산할 수밖에 없다고 느낀다.
그래서 프로그래머는 빨리 가려고 시간을 들이지 않는다.</p>

<p>하지만, 기한을 맞추는 유일한 방법은, 그러니까 빨리 가는 유일한 방법은, 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.</p>

<hr />

<p><strong>깨끗한 코드란?</strong></p>

<ul>
  <li>
    <p>바야네 스트롭스트룹<br />
  깨끗한 코드는 보는 사람에게 즐거움을 선사해야 한다.<br />
  깨끗한 코드는 세세한 사항까지 꼼꼼하게 처리하는 코드다.<br />
  깨끗한 코드란 한 가지를 잘 한다고 단언한다.</p>
  </li>
  <li>
    <p>그래디 부치<br />
가독성이 좋아야 한다.<br />
코드는 추측이 아니라 사실에 기반해야 한다. 반드시 필요한 내용만 담아야 한다.</p>
  </li>
  <li>
    <p>큰 데이브 토마스<br />
깨끗한 코드란 다른 사람이 고치기 쉽다.<br />
코드는 작을수록 좋다.</p>
  </li>
  <li>
    <p>마이클 페더스<br />
깨끗한 코드는 주의 깊게 작성한 코드다.</p>
  </li>
  <li>
    <p>론 제프리스<br />
중복 줄이기, 표현력 높이기, 초반부터 간단한 추상화 고려하기</p>
  </li>
  <li>
    <p>워드 커닝햄<br />
깨끗한 코드는 읽으면서 놀랄 일이 없어야 한다. <br />
읽으면서 짐작한 대로 돌아가는 코드가 깨끗한 코드다.</p>
  </li>
</ul>

<hr />

<p><strong>보이스카우트 규칙</strong></p>

<p>캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라.</p>
:ET