<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://dadoldasol.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dadoldasol.github.io/" rel="alternate" type="text/html" /><updated>2022-05-12T22:34:56+09:00</updated><id>https://dadoldasol.github.io/feed.xml</id><title type="html">Solog About Learning</title><subtitle>just get on with it</subtitle><author><name>Solog</name></author><entry><title type="html">Ch3. 함수</title><link href="https://dadoldasol.github.io/cleancode/cleancode-ch3/" rel="alternate" type="text/html" title="Ch3. 함수" /><published>2022-05-12T00:00:00+09:00</published><updated>2022-05-12T00:00:00+09:00</updated><id>https://dadoldasol.github.io/cleancode/cleancode-ch3</id><content type="html" xml:base="https://dadoldasol.github.io/cleancode/cleancode-ch3/">&lt;p&gt;함수 : 어떤 프로그램이든 가장 기본적인 단위&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 장에서 나오는 내용&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수가 읽기 쉽고 이해하기 쉬우려면 어떻게 구현해야 하는가?&lt;/li&gt;
  &lt;li&gt;의도를 분명히 표현하는 함수는 어떻게 구현할 수 있을까?&lt;/li&gt;
  &lt;li&gt;함수에 어떤 속성을 부여해야 처음 읽는 사람이 프로그램 내부를 직관적으로 파악할 수 있을까?&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;작게 만들어라!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;함수를 만드는 첫째 규칙은 ‘작게!’다.&lt;/p&gt;

&lt;p&gt;얼마나 짧아야 좋을까? 각 함수가 이야기 하나를 표현하면 좋다.&lt;br /&gt;
아래 예제는 책에 나오는 예제로, 함수가 짧고 표현이 명백하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;renderPageWithSetupsAndTearDowns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;nc&quot;&gt;PageData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSuite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isTestPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;includeSetupAndTeardownPages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSuite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중첩 구조가 생길만큼 함수가 커져서는 안된다.&lt;br /&gt;
함수에 들여쓰기 수준은 1단이나 2단을 넘어서면 안 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;한 가지만 해라!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;함수는 한 가지를 해야 한다. 그 한 가지를 잘 해야 한다. 그 한 가지만을 해야 한다!&lt;/p&gt;

&lt;p&gt;여기서 문제는 그 ‘한 가지’가 무엇인지 알기가 어렵다는 점이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;지정된 함수 이름 아래에서 추상화 수준이 하나다.&lt;/li&gt;
  &lt;li&gt;단순히 다른 표현이 아니라 의미 있는 이름으로 다른 함수를 추출할 수 있다면 그 함수는 여러 작업을 하는 셈이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;함수 당 추상화 수준은 하나로!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;한 함수 내에 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다.&lt;/li&gt;
  &lt;li&gt;위에서 아래로 코드 읽기: 내려가기 법칙
코드는 위에서 아래로 이야기처럼 읽혀야 좋다.&lt;br /&gt;
위에서 아래로 프로그램을 읽으면 함수 추상화 수준이 한 번에 한 단계씩 낮아진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Switch 문&lt;/p&gt;

&lt;p&gt;본질적으로 Switch 문은 N가지를 처리한다.&lt;br /&gt;
다형성을 이용해서 각 switch 문을 저차원 클래스에 숨기고 절대로 반복하지 않도록 하자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isPayday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculatePay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deliverPay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Monoey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;------------------&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmployeeFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EmployeeRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidEmployeeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;------------------&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmployeeFactoryImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmployeeFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;makeEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EmployeeRecord&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidEmployeeType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Commissioned:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CommissionedEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Hourly:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HourlyEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Salaried:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SalariedEmployee&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InvalidEmployeeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Solog</name></author><category term="cleancode" /><summary type="html">cleancode</summary></entry><entry><title type="html">Ch2. 의미 있는 이름</title><link href="https://dadoldasol.github.io/cleancode/cleancode-ch2/" rel="alternate" type="text/html" title="Ch2. 의미 있는 이름" /><published>2022-05-11T00:00:00+09:00</published><updated>2022-05-11T00:00:00+09:00</updated><id>https://dadoldasol.github.io/cleancode/cleancode-ch2</id><content type="html" xml:base="https://dadoldasol.github.io/cleancode/cleancode-ch2/">&lt;hr /&gt;

&lt;p&gt;이름을 잘 짓는 것은 굉장히 중요하다.&lt;br /&gt;
이 장에서는 몇가지 이름 짓는 법에 대해 나열한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;의도를 분명히 밝혀라&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 경과 시간(단위: 날짜)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이름 d는 아무 의미도 나타내지 않는다. &lt;br /&gt;
의도가 드러나는 이름을 사용하면 코드 이해와 변경이 쉬워진다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;그릇된 정보를 피하라&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;코드에 그릇된 단서를 남겨서는 안 된다.&lt;/li&gt;
  &lt;li&gt;나름대로 널리 쓰이는 의미가 있는 단어를 다른 의미로 사용해도 안 된다.&lt;br /&gt;
(ex. hp, aix, sco : 유닉스 플랫폼이나 유닉스 변종을 가르키는 이름)&lt;/li&gt;
  &lt;li&gt;서로 흡사한 이름을 사용하지 않도록 주의한다.&lt;/li&gt;
  &lt;li&gt;유사한 개념은 유사한 표기법을 사용한다. 일관성이 떨어지는 표기법은 그릇된 정보다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;의미 있게 구분하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;연속된 숫자를 덧붙이거나 불용어(noise word)를 추가하는 방식은 적절하지 못하다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;읽는 사람이 차이를 알도록 이름을 지어라.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;getActiveAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;getActiveAccounts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;발음하기 쉬운 이름을 사용하라&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;genymdhms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 변수를 직원들과 이야기할 때 어려움이 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;검색하기 쉬운 이름을 사용하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;e와 숫자 7과 같은 변수와 상수는 검색하기 어렵다.&lt;br /&gt;
검색을 하려고 한다면 다른 것들도 검색되어 찾기에 어려움이 생긴다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;인코딩을 피하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;유형이나 범위 정보까지 인코딩에 넣으면 그만큼 이름을 해독하기가 어렵다.&lt;br /&gt;
개발자가 익힐 코드 양은 상당히 많은데, 여기에 부담을 더하지 말자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;자신의 기억력을 자랑하지 마라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;독자가 코드를 읽으면서 변수 이름을 자신이 아는 이름으로 변환해야 한다면,&lt;br /&gt;
그 변수 이름은 바람직하지 못하다.&lt;br /&gt;
전문가 프로그래머는 명료함이 최고라는 사실을 이해한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;클래스 이름&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;명사, 명사구가 적합하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;메서드 이름&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;동사, 동사구가 적합하다.&lt;br /&gt;
접근자, 변경자, 조건자는 값 앞에 get, set, is를 붙인다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;기발한 이름은 피하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;특정 문화에서만 사용하는 농담은 피하는 편이 좋다.&lt;br /&gt;
의도를 분명하고 솔직하게 표현하라.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;한 개념에 한 단어를 사용하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;추상적인 개념 하나에 단어 하나를 선택해 이를 고수한다.&lt;br /&gt;
예를 들어, 똑같은 메서드를 클래스마다 fetch, retrieve, get으로 제각각 부르면 혼란스럽다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;말장난을 하지마라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;한 단어를 두 가지 목적으로 사용하지 마라. 다른 개념에 같은 단어를 사용한다면 그것은 말장난에 불과하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;의미 있는 맥락을 추가하라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;스스로 의미가 분명한 이름이 없지 않다. 
클래스, 함수, 이름 공간에 넣어 맥락을 부여한다. &lt;br /&gt;
모든 방법이 실패하면 마지막 수단으로 접두어를 붙인다.&lt;/p&gt;

&lt;p&gt;예를 들어, firstName, lastName, street, houseNumber, city, state 라는 변수가 있다.&lt;br /&gt;
변수를 훑어보면 주소라는 사실을 금방 알아챈다.&lt;br /&gt;
하지만 어느 메서드가 state라는 변수 하나만 사용한다면?&lt;br /&gt;
알아차리기 어려울 것이다.&lt;/p&gt;

&lt;p&gt;addr라는 접두어를 추가해 addrFirstName, addrLastName, addrState라고 쓰면 맥락이 좀 더 분명해진다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;불필요한 맥락을 없애라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;고급 휘발유 충전소(Gas Station Delux)라는 애플리케이션을 짠다고 가정하자.&lt;br /&gt;
모든 클래스 이름을 GSD로 시작하겠다는 생각은 전혀 바람직하지 못하다.&lt;/p&gt;</content><author><name>Solog</name></author><category term="cleancode" /><summary type="html">cleancode</summary></entry><entry><title type="html">Ch1. 깨끗한 코드</title><link href="https://dadoldasol.github.io/cleancode/cleancode-ch1/" rel="alternate" type="text/html" title="Ch1. 깨끗한 코드" /><published>2022-05-10T00:00:00+09:00</published><updated>2022-05-10T00:00:00+09:00</updated><id>https://dadoldasol.github.io/cleancode/cleancode-ch1</id><content type="html" xml:base="https://dadoldasol.github.io/cleancode/cleancode-ch1/">&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;코드는 존재하리라&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;궁극적으로 코드는 요구사항을 표현하는 언어라는 사실을 명심한다.&lt;br /&gt;
요구사항에 더욱 가까운 언어를 만들 수도 있고,&lt;br /&gt;
요구사항에서 정형 구조를 뽑아내는 도구를 만들 수도 있다.&lt;br /&gt;
하지만 어느 순간에는 정밀한 표현이 필요하다. 그 필요성을 없앨 방법은 없다.&lt;br /&gt;
그러므로 코드는 항상 존재하리라.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;나쁜 코드&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;르블랑의 법칙(leblanc’s Law) : 나중은 결코 오지 않는다.&lt;/p&gt;

&lt;p&gt;나쁜 코드가 쌓일수록 팀 생산성은 떨어진다. 
하지만 기한을 맞추려면 나쁜 코드를 양산할 수밖에 없다고 느낀다.
그래서 프로그래머는 빨리 가려고 시간을 들이지 않는다.&lt;/p&gt;

&lt;p&gt;하지만, 기한을 맞추는 유일한 방법은, 그러니까 빨리 가는 유일한 방법은, 언제나 코드를 최대한 깨끗하게 유지하는 습관이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;깨끗한 코드란?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;바야네 스트롭스트룹&lt;br /&gt;
  깨끗한 코드는 보는 사람에게 즐거움을 선사해야 한다.&lt;br /&gt;
  깨끗한 코드는 세세한 사항까지 꼼꼼하게 처리하는 코드다.&lt;br /&gt;
  깨끗한 코드란 한 가지를 잘 한다고 단언한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그래디 부치&lt;br /&gt;
가독성이 좋아야 한다.&lt;br /&gt;
코드는 추측이 아니라 사실에 기반해야 한다. 반드시 필요한 내용만 담아야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;큰 데이브 토마스&lt;br /&gt;
깨끗한 코드란 다른 사람이 고치기 쉽다.&lt;br /&gt;
코드는 작을수록 좋다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;마이클 페더스&lt;br /&gt;
깨끗한 코드는 주의 깊게 작성한 코드다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;론 제프리스&lt;br /&gt;
중복 줄이기, 표현력 높이기, 초반부터 간단한 추상화 고려하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;워드 커닝햄&lt;br /&gt;
깨끗한 코드는 읽으면서 놀랄 일이 없어야 한다. &lt;br /&gt;
읽으면서 짐작한 대로 돌아가는 코드가 깨끗한 코드다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;보이스카우트 규칙&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;캠프장은 처음 왔을 때보다 더 깨끗하게 해놓고 떠나라.&lt;/p&gt;</content><author><name>Solog</name></author><category term="cleancode" /><summary type="html">cleancode</summary></entry><entry><title type="html">알고리즘 문제 풀이 기록</title><link href="https://dadoldasol.github.io/algo/algo-first/" rel="alternate" type="text/html" title="알고리즘 문제 풀이 기록" /><published>2022-01-24T00:00:00+09:00</published><updated>2022-01-24T00:00:00+09:00</updated><id>https://dadoldasol.github.io/algo/algo-first</id><content type="html" xml:base="https://dadoldasol.github.io/algo/algo-first/">&lt;hr /&gt;

&lt;p&gt;여러 가지 이유로 12월 중순부터 알고리즘 문제를 풀기 시작했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;C++ STL을 제대로 모른다. (회사에서는 거의 몰라도 되는 수준의 코딩을 진행함) &lt;br /&gt;
이직을 위한 준비 &lt;br /&gt;
알고리즘 실력을 향상시키고자 하는 마음 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음에는 이직을 위한 원대한 꿈을 가지고 시작했지만…  &lt;br /&gt;
코딩한다는 사람 치고 너무 모르는 것 같아서 &lt;br /&gt;
이직 생각은 반쯤 버리고 시간 나는 대로 풀고 있게 됐다.&lt;/p&gt;

&lt;p&gt;어디서부터 시작해야 하는지 정말 잘 모르겠어서 &lt;br /&gt;
여기저기 검색해보니 아래 사이트에서 정리를 잘 해주셨다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://plzrun.tistory.com/entry/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%AC%B8%EC%A0%9C%ED%92%80%EC%9D%B4PS-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0&quot;&gt;https://plzrun.tistory.com/entry/알고리즘-문제풀이PS-시작하기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;그래서 현재까지는 위 사이트에 나와있는 대로 뭘 모르는지 몰라 &lt;br /&gt;
boj 문제들을 이것 저것 풀면서 짚어나가고 있다. &lt;br /&gt;
나 메타인지가 부족한가.. 🤨&lt;/p&gt;

&lt;p&gt;아무튼 여력이 되는만큼 풀고 푼 내용들을 정말 간략하게 여기에 올려볼 예정이다. &lt;br /&gt;
과연 알고리즘 문제 해결 전략 책까지 볼 수 있을지…&lt;/p&gt;</content><author><name>Solog</name></author><category term="algo" /><summary type="html">서론</summary></entry><entry><title type="html">Leetcode Week1</title><link href="https://dadoldasol.github.io/algo/leetcode-week1/" rel="alternate" type="text/html" title="Leetcode Week1" /><published>2021-04-11T00:00:00+09:00</published><updated>2021-04-11T00:00:00+09:00</updated><id>https://dadoldasol.github.io/algo/leetcode-week1</id><content type="html" xml:base="https://dadoldasol.github.io/algo/leetcode-week1/">&lt;p&gt;leetcode category test&lt;/p&gt;</content><author><name>Solog</name></author><category term="algo" /><summary type="html">릿코드 1주차 문제풀이 모음</summary></entry></feed>